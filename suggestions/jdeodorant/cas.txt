org.apereo.cas.oidc.web.controllers.OidcDynamicClientRegistrationEndpointController.getClientRegistrationResponse(org.apereo.cas.oidc.dynareg.OidcClientRegistrationRequest, org.apereo.cas.services.OidcRegisteredService);OidcClientRegistrationRequest
org.apereo.cas.pm.PasswordValidator.validateCasMustChangePassView(org.apereo.cas.pm.PasswordChangeBean, org.springframework.binding.validation.ValidationContext);PasswordChangeBean
org.apereo.cas.support.saml.web.idp.profile.builders.SamlProfileSamlNameIdBuilder.finalizeNameId(org.opensaml.saml.saml2.core.NameID, org.opensaml.saml.saml2.core.AuthnRequest, org.jasig.cas.client.validation.Assertion, java.util.List<java.lang.String>, org.apereo.cas.support.saml.services.SamlRegisteredService, org.apereo.cas.support.saml.services.idp.metadata.SamlRegisteredServiceServiceProviderMetadataFacade);SamlRegisteredServiceServiceProviderMetadataFacade
org.apereo.cas.support.saml.web.idp.profile.builders.enc.SamlObjectEncrypter.getKeyEncryptionParameters(org.opensaml.saml.saml2.core.Assertion, org.apereo.cas.support.saml.services.SamlRegisteredService, org.apereo.cas.support.saml.services.idp.metadata.SamlRegisteredServiceServiceProviderMetadataFacade, org.opensaml.security.credential.Credential);SamlRegisteredServiceServiceProviderMetadataFacade
org.apereo.cas.support.saml.web.idp.profile.builders.SamlProfileSamlNameIdBuilder.validateRequiredNameIdFormatIfAny(org.opensaml.saml.saml2.core.AuthnRequest, org.apereo.cas.support.saml.services.idp.metadata.SamlRegisteredServiceServiceProviderMetadataFacade, java.util.List<java.lang.String>, java.lang.String);SamlRegisteredServiceServiceProviderMetadataFacade
org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer.serialize(org.apache.cassandra.streaming.messages.FileMessageHeader, org.apache.cassandra.io.util.DataOutputPlus, int);FileMessageHeader
org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer.serializedSize(org.apache.cassandra.streaming.messages.FileMessageHeader, int);FileMessageHeader
org.apache.cassandra.io.sstable.IndexSummary.IndexSummarySerializer.serialize(org.apache.cassandra.io.sstable.IndexSummary, org.apache.cassandra.io.util.DataOutputPlus, boolean);IndexSummary
org.apache.cassandra.db.rows.Cell.Serializer.serializedSize(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.SerializationHeader);Cell
org.apache.cassandra.tools.nodetool.Ring.printDc(org.apache.cassandra.tools.NodeProbe, java.lang.String, java.lang.String, com.google.common.collect.LinkedHashMultimap<java.lang.String,java.lang.String>, org.apache.cassandra.tools.nodetool.SetHostStat, boolean);NodeProbe
org.apache.cassandra.cql3.QueryOptions.Codec.gatherFlags(org.apache.cassandra.cql3.QueryOptions);QueryOptions
org.apache.cassandra.db.rows.EncodingStats.Serializer.serialize(org.apache.cassandra.db.rows.EncodingStats, org.apache.cassandra.io.util.DataOutputPlus);EncodingStats
org.apache.cassandra.db.rows.EncodingStats.Serializer.serializedSize(org.apache.cassandra.db.rows.EncodingStats);EncodingStats
org.apache.cassandra.stress.report.StressMetrics.record(org.apache.cassandra.stress.report.TimingInterval, long, long, long, long, long, boolean);TimingInterval
org.apache.cassandra.db.commitlog.CommitLogReplayer.MutationInitiator.initiateMutation(org.apache.cassandra.db.Mutation, long, int, int, org.apache.cassandra.db.commitlog.CommitLogReplayer);CommitLogReplayer
org.apache.cassandra.thrift.CassandraServer.thriftifySubColumn(org.apache.cassandra.db.LegacyLayout.LegacyCell, java.nio.ByteBuffer);LegacyCell
org.apache.cassandra.cql3.QueryProcessor.processBatch(org.apache.cassandra.cql3.statements.BatchStatement, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.BatchQueryOptions, long);BatchStatement
org.apache.cassandra.thrift.CassandraServer.toLegacyCell(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.thrift.Column, int);Column
org.apache.cassandra.db.Columns.Serializer.deserializeLargeSubset(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.Columns, int);Columns
org.apache.cassandra.db.aggregation.GroupingState.Serializer.serialize(org.apache.cassandra.db.aggregation.GroupingState, org.apache.cassandra.io.util.DataOutputPlus, int, org.apache.cassandra.db.ClusteringComparator);GroupingState
org.apache.cassandra.db.aggregation.GroupingState.Serializer.serializedSize(org.apache.cassandra.db.aggregation.GroupingState, int, org.apache.cassandra.db.ClusteringComparator);GroupingState
org.apache.cassandra.db.rows.UnfilteredSerializer.readSimpleColumn(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper, org.apache.cassandra.db.rows.Row.Builder, org.apache.cassandra.db.LivenessInfo);SerializationHelper
org.apache.cassandra.gms.FailureDetector.appendEndpointState(java.lang.StringBuilder, org.apache.cassandra.gms.EndpointState);EndpointState
org.apache.cassandra.net.MessagingService.incrementDroppedMessages(org.apache.cassandra.net.MessagingService.DroppedMessages, boolean);DroppedMessages
org.apache.cassandra.stress.CompactionStress.generateTokens(java.lang.String, org.apache.cassandra.locator.TokenMetadata, java.lang.Integer);TokenMetadata
org.apache.cassandra.stress.settings.SettingsCommand.truncateTables(org.apache.cassandra.stress.settings.StressSettings, java.lang.String, java.lang.String[]);StressSettings
org.apache.cassandra.thrift.CassandraServer.thriftifySubCounter(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.LegacyLayout.LegacyCell);LegacyCell
org.apache.cassandra.thrift.CassandraServer.makeSlices(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.SliceRange);SliceRange
org.apache.cassandra.cql3.CQLTester.assertEmpty(org.apache.cassandra.cql3.UntypedResultSet);UntypedResultSet
org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.remainingTTL(org.apache.cassandra.db.rows.Cell, int);Cell
org.apache.cassandra.cql3.statements.AlterTypeStatement.updateDefinition(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition, java.lang.String, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.UserType);ColumnDefinition
org.apache.cassandra.db.Columns.Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.config.CFMetaData);CFMetaData
org.apache.cassandra.db.Keyspace.unloadCf(org.apache.cassandra.db.ColumnFamilyStore);ColumnFamilyStore
org.apache.cassandra.db.Slices.Serializer.serialize(org.apache.cassandra.db.Slices, org.apache.cassandra.io.util.DataOutputPlus, int);Slices
org.apache.cassandra.db.compaction.CompactionIterator.GarbageSkippingUnfilteredRowIterator.updateOpenDeletionTime(org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.rows.Unfiltered);DeletionTime
org.apache.cassandra.db.filter.ColumnFilter.Serializer.serialize(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.io.util.DataOutputPlus, int);ColumnFilter
org.apache.cassandra.db.filter.ColumnFilter.Serializer.serializedSize(org.apache.cassandra.db.filter.ColumnFilter, int);ColumnFilter
org.apache.cassandra.db.rows.UnfilteredSerializer.writeComplexColumn(org.apache.cassandra.db.rows.ComplexColumnData, org.apache.cassandra.config.ColumnDefinition, boolean, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.io.util.DataOutputPlus);ComplexColumnData
org.apache.cassandra.db.rows.UnfilteredSerializer.sizeOfComplexColumn(org.apache.cassandra.db.rows.ComplexColumnData, org.apache.cassandra.config.ColumnDefinition, boolean, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.SerializationHeader);ComplexColumnData
org.apache.cassandra.db.rows.UnfilteredSerializer.serializedMarkerBodySize(org.apache.cassandra.db.rows.RangeTombstoneMarker, org.apache.cassandra.db.SerializationHeader, long, int);SerializationHeader
org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeMarkerBody(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.ClusteringBoundOrBoundary);SerializationHeader
org.apache.cassandra.gms.Gossiper.getMaxEndpointStateVersion(org.apache.cassandra.gms.EndpointState);EndpointState
org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.shouldCleanupOldValue(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.rows.Cell);Cell
org.apache.cassandra.service.StorageProxy.appliesLocally(org.apache.cassandra.db.Mutation);Mutation
org.apache.cassandra.service.StorageService.getSplits(java.util.List<org.apache.cassandra.dht.Token>, int, org.apache.cassandra.db.ColumnFamilyStore);ColumnFamilyStore
org.apache.cassandra.streaming.StreamReader.writePartition(org.apache.cassandra.streaming.StreamReader.StreamDeserializer, org.apache.cassandra.io.sstable.SSTableMultiWriter);StreamDeserializer
org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.Slices);CFMetaData
org.apache.cassandra.thrift.CassandraServer.getTtl(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.Column);Column
org.apache.cassandra.thrift.CassandraServer.toCounterLegacyCell(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.thrift.CounterColumn);CounterColumn
org.apache.cassandra.config.CFMetaData.Serializer.serialize(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataOutputPlus, int);CFMetaData
org.apache.cassandra.config.CFMetaData.Serializer.serializedSize(org.apache.cassandra.config.CFMetaData, int);CFMetaData
org.apache.cassandra.cql3.statements.AlterTypeStatement.updateDefinition(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition, java.lang.String, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.UserType);CFMetaData
org.apache.cassandra.cql3.statements.AuthenticationStatement.checkPermission(org.apache.cassandra.service.ClientState, org.apache.cassandra.auth.Permission, org.apache.cassandra.auth.RoleResource);ClientState
org.apache.cassandra.db.Columns.Serializer.serialize(org.apache.cassandra.db.Columns, org.apache.cassandra.io.util.DataOutputPlus);Columns
org.apache.cassandra.db.Columns.Serializer.serializedSize(org.apache.cassandra.db.Columns);Columns
org.apache.cassandra.db.Columns.Serializer.serializeLargeSubset(java.util.Collection<org.apache.cassandra.config.ColumnDefinition>, int, org.apache.cassandra.db.Columns, int, org.apache.cassandra.io.util.DataOutputPlus);Columns
org.apache.cassandra.db.Columns.Serializer.serializeLargeSubsetSize(java.util.Collection<org.apache.cassandra.config.ColumnDefinition>, int, org.apache.cassandra.db.Columns, int);Columns
org.apache.cassandra.db.CounterMutation.compare(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.ColumnFamilyStore);ColumnFamilyStore
org.apache.cassandra.db.Slices.Serializer.serializedSize(org.apache.cassandra.db.Slices, int);Slices
org.apache.cassandra.db.compaction.CompactionManager.lookupSSTable(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.io.sstable.Descriptor);ColumnFamilyStore
org.apache.cassandra.db.context.CounterContext.ContextState.writeElementAtOffset(java.nio.ByteBuffer, int, org.apache.cassandra.utils.CounterId, long, long);CounterId
org.apache.cassandra.db.lifecycle.LogAwareFileLister.setTemporary(org.apache.cassandra.db.lifecycle.LogFile, java.util.Collection<java.util.Set<java.io.File>>, java.util.Collection<java.util.Set<java.io.File>>);LogFile
org.apache.cassandra.db.monitoring.MonitoringTask.getLogMessages(org.apache.cassandra.db.monitoring.MonitoringTask.AggregatedOperations);AggregatedOperations
org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.rows.SerializationHelper.Flag, org.apache.cassandra.db.DecoratedKey);DecoratedKey
org.apache.cassandra.db.rows.UnfilteredSerializer.writeComplexColumn(org.apache.cassandra.db.rows.ComplexColumnData, org.apache.cassandra.config.ColumnDefinition, boolean, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.io.util.DataOutputPlus);SerializationHeader
org.apache.cassandra.db.rows.UnfilteredSerializer.sizeOfComplexColumn(org.apache.cassandra.db.rows.ComplexColumnData, org.apache.cassandra.config.ColumnDefinition, boolean, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.SerializationHeader);SerializationHeader
org.apache.cassandra.db.rows.UnfilteredSerializer.skipComplexColumn(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.SerializationHeader, boolean);SerializationHeader
org.apache.cassandra.db.view.TableViews.buildMutations(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.db.view.ViewUpdateGenerator>);CFMetaData
org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.applyOwnershipAdjustment(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.BaseTokenInfo<Unit,?>, org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitInfo<Unit>, org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token, double, org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitAdjustmentTracker<Unit>);Token
org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.cloneWithHigherVersion(org.apache.cassandra.gms.VersionedValue);VersionedValue
org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.outValue(org.apache.cassandra.gms.VersionedValue, int);VersionedValue
org.apache.cassandra.hints.HintsWriteExecutor.flush(org.apache.cassandra.hints.HintsBuffer);HintsBuffer
org.apache.cassandra.index.sasi.SASIIndexBuilder.completeSSTable(org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter, org.apache.cassandra.io.sstable.format.SSTableReader, java.util.Collection<org.apache.cassandra.index.sasi.conf.ColumnIndex>);PerSSTableIndexWriter
org.apache.cassandra.index.sasi.disk.TokenTree.searchBlock(long, short, org.apache.cassandra.index.sasi.utils.MappedBuffer);MappedBuffer
org.apache.cassandra.schema.IndexMetadata.Serializer.serialize(org.apache.cassandra.schema.IndexMetadata, org.apache.cassandra.io.util.DataOutputPlus, int);IndexMetadata
org.apache.cassandra.schema.IndexMetadata.Serializer.serializedSize(org.apache.cassandra.schema.IndexMetadata, int);IndexMetadata
org.apache.cassandra.serializers.MapSerializer.getSerializedValue(java.nio.ByteBuffer, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType);AbstractType
org.apache.cassandra.service.StorageService.updateNetVersion(java.net.InetAddress, org.apache.cassandra.gms.VersionedValue);VersionedValue
org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.Slices);Slices
org.apache.cassandra.tools.nodetool.Ring.printDc(org.apache.cassandra.tools.NodeProbe, java.lang.String, java.lang.String, com.google.common.collect.LinkedHashMultimap<java.lang.String,java.lang.String>, org.apache.cassandra.tools.nodetool.SetHostStat, boolean);SetHostStat
org.apache.cassandra.triggers.TriggerExecutor.validateSamePartition(java.util.UUID, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.partitions.PartitionUpdate);DecoratedKey
org.apache.cassandra.db.context.CounterContext.merge(org.apache.cassandra.db.context.CounterContext.ContextState, org.apache.cassandra.db.context.CounterContext.ContextState, org.apache.cassandra.db.context.CounterContext.ContextState);ContextState
org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.rows.SerializationHelper.Flag, org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.Header);Header
org.apache.cassandra.db.rows.UnfilteredSerializer.serializedRowBodySize(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.SerializationHeader, long, int);SerializationHeader
org.apache.cassandra.db.rows.UnfilteredSerializer.readComplexColumn(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper, boolean, org.apache.cassandra.db.rows.Row.Builder, org.apache.cassandra.db.LivenessInfo);SerializationHelper
org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.getFilterPipeline();StandardTokenizerOptions
org.apache.cassandra.db.CounterMutation.updateWithCurrentValue(org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark, org.apache.cassandra.db.ClockAndCount, org.apache.cassandra.db.ColumnFamilyStore);CounterMark
org.apache.cassandra.db.commitlog.CommitLogSegmentReader.readSyncMarker(org.apache.cassandra.db.commitlog.CommitLogDescriptor, int, org.apache.cassandra.io.util.RandomAccessReader);RandomAccessReader
org.apache.cassandra.db.context.CounterContext.compare(org.apache.cassandra.db.context.CounterContext.ContextState, org.apache.cassandra.db.context.CounterContext.ContextState);ContextState
org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.makeDynamicCell(org.apache.cassandra.db.rows.Cell);Cell
org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepareType(java.lang.String, org.apache.cassandra.cql3.CQL3Type.Raw);Raw
org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepareType(java.lang.String, org.apache.cassandra.cql3.CQL3Type.Raw);Raw
org.apache.cassandra.cql3.statements.DropAggregateStatement.prepareType(java.lang.String, org.apache.cassandra.cql3.CQL3Type.Raw);Raw
org.apache.cassandra.db.commitlog.CommitLogReader.shouldSkipSegmentId(java.io.File, org.apache.cassandra.db.commitlog.CommitLogDescriptor, org.apache.cassandra.db.commitlog.CommitLogPosition);CommitLogDescriptor
org.apache.cassandra.stress.operations.predefined.PredefinedOperation.getColumnValues(org.apache.cassandra.stress.operations.predefined.PredefinedOperation.ColumnSelection);ColumnSelection
org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SlicePredicate);CFMetaData
org.apache.cassandra.cql3.VariableSpecifications.getPartitionKeyBindIndexes(org.apache.cassandra.config.CFMetaData);CFMetaData
org.apache.cassandra.cql3.statements.BatchStatement.executeWithConditions(org.apache.cassandra.cql3.BatchQueryOptions, org.apache.cassandra.service.QueryState, long);BatchQueryOptions
org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.checkNeedsFiltering(org.apache.cassandra.cql3.restrictions.StatementRestrictions);StatementRestrictions
org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer.getFilterPipeline();NonTokenizingOptions
org.apache.cassandra.io.compress.CompressionMetadata.Writer.writeHeader(java.io.DataOutput, long, int);CompressionParams
org.apache.cassandra.io.sstable.SSTable.estimateRowsFromIndex(org.apache.cassandra.io.util.RandomAccessReader);RandomAccessReader
org.apache.cassandra.io.sstable.format.big.BigTableWriter.writeMetadata(org.apache.cassandra.io.sstable.Descriptor, java.util.Map<org.apache.cassandra.io.sstable.metadata.MetadataType,org.apache.cassandra.io.sstable.metadata.MetadataComponent>);Descriptor
org.apache.cassandra.io.sstable.metadata.MetadataSerializer.rewriteSSTableMetadata(org.apache.cassandra.io.sstable.Descriptor, java.util.Map<org.apache.cassandra.io.sstable.metadata.MetadataType,org.apache.cassandra.io.sstable.metadata.MetadataComponent>);Descriptor
org.apache.cassandra.net.MessagingService.receive(org.apache.cassandra.net.MessageIn, int);MessageIn
org.apache.cassandra.config.CFMetaData.newReadRepairDecision();TableParams
org.apache.cassandra.config.Schema.getFunctions(org.apache.cassandra.cql3.functions.FunctionName);FunctionName
org.apache.cassandra.config.Schema.findFunction(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>);FunctionName
org.apache.cassandra.cql3.Json.Marker.makeReceiver(org.apache.cassandra.config.CFMetaData);CFMetaData
org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.componentBounds(org.apache.cassandra.cql3.statements.Bound, org.apache.cassandra.cql3.QueryOptions);TermSlice
org.apache.cassandra.cql3.statements.CFStatement.prepareKeyspace(org.apache.cassandra.service.ClientState);KeyspaceElementName
org.apache.cassandra.cql3.statements.CFStatement.prepareKeyspace(java.lang.String);KeyspaceElementName
org.apache.cassandra.cql3.statements.CFStatement.keyspace();KeyspaceElementName
org.apache.cassandra.cql3.statements.SelectStatement.getPager(org.apache.cassandra.db.ReadQuery, org.apache.cassandra.cql3.QueryOptions);QueryOptions
org.apache.cassandra.cql3.statements.SelectStatement.getRequestedRows(org.apache.cassandra.cql3.QueryOptions);StatementRestrictions
org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.getAggregationSpecification(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.selection.Selection, org.apache.cassandra.cql3.restrictions.StatementRestrictions, boolean);CFMetaData
org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.getOrderingIndex(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.selection.Selection);Selection
org.apache.cassandra.cql3.statements.UpdatesCollector.getMutation(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.ConsistencyLevel);CFMetaData
org.apache.cassandra.db.ColumnFamilyStore.invalidateCaches();CFMetaData
org.apache.cassandra.db.ColumnFamilyStore.isRowCacheEnabled();CFMetaData
org.apache.cassandra.db.CounterMutation.getCounterLockKeys();Mutation
org.apache.cassandra.db.CounterMutation.updateWithCurrentValue(org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark, org.apache.cassandra.db.ClockAndCount, org.apache.cassandra.db.ColumnFamilyStore);ClockAndCount
org.apache.cassandra.db.Memtable.createFlushRunnables(java.util.List<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, org.apache.cassandra.db.lifecycle.LifecycleTransaction);ColumnFamilyStore
org.apache.cassandra.db.Serializers.oldFormatSerializer(org.apache.cassandra.io.sstable.format.Version);CFMetaData
org.apache.cassandra.db.commitlog.CommitLogReplayer.pointInTimeExceeded(org.apache.cassandra.db.Mutation);CommitLogArchiver
org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC.updateCDCTotalSize();CDCSizeTracker
org.apache.cassandra.db.compaction.CompactionController.openDataFile(org.apache.cassandra.io.sstable.format.SSTableReader);SSTableReader
org.apache.cassandra.db.compaction.CompactionLogger.formatSSTable(org.apache.cassandra.db.compaction.AbstractCompactionStrategy, org.apache.cassandra.io.sstable.format.SSTableReader);SSTableReader
org.apache.cassandra.db.compaction.CompactionManager.finishCompactionsAndShutdown(long, java.util.concurrent.TimeUnit);JMXEnabledThreadPoolExecutor
org.apache.cassandra.db.lifecycle.LifecycleTransaction.unmarkCompacting(java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, java.lang.Throwable);Tracker
org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound.canUseMetadataLowerBound();SSTableReader
org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(org.apache.cassandra.db.rows.RangeTombstoneMarker, org.apache.cassandra.db.SerializationHeader, long, int);SerializationHeader
org.apache.cassandra.hints.HintsDispatchExecutor.TransferHintsTask.transfer(java.util.UUID);HintsCatalog
org.apache.cassandra.index.SecondaryIndexManager.createInstance(org.apache.cassandra.schema.IndexMetadata);IndexMetadata
org.apache.cassandra.index.internal.CassandraIndexSearcher.makeIndexBound(java.nio.ByteBuffer, org.apache.cassandra.db.ClusteringBound);ClusteringBound
org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.MutableLevel.flushMetadata(com.carrotsearch.hppc.LongArrayList);BufferedDataOutputStreamPlus
org.apache.cassandra.io.sstable.Descriptor.filenameFor(org.apache.cassandra.io.sstable.Component);Component
org.apache.cassandra.io.sstable.Descriptor.relativeFilenameFor(org.apache.cassandra.io.sstable.Component);Component
org.apache.cassandra.io.sstable.format.SSTableReader.setReplaced();InstanceTidier
org.apache.cassandra.io.sstable.format.SSTableReader.isReplaced();InstanceTidier
org.apache.cassandra.io.sstable.format.SSTableReader.runOnClose(java.lang.Runnable);InstanceTidier
org.apache.cassandra.io.sstable.format.SSTableReader.estimatedKeysForRanges(java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>);IndexSummary
org.apache.cassandra.io.sstable.format.SSTableReader.getAvgColumnSetPerRow();StatsMetadata
org.apache.cassandra.io.util.FileHandle.Builder.maybeCached(org.apache.cassandra.io.util.ChunkReader);ChunkCache
org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges(org.apache.cassandra.locator.TokenMetadata);TokenMetadata
org.apache.cassandra.locator.AbstractReplicationStrategy.getRangeAddresses(org.apache.cassandra.locator.TokenMetadata);TokenMetadata
org.apache.cassandra.net.MessagingService.incrementDroppedMessages(org.apache.cassandra.net.MessagingService.DroppedMessages, long, boolean);DroppedMessageMetrics
org.apache.cassandra.schema.Types.Builder.add(org.apache.cassandra.db.marshal.UserType);UserType
org.apache.cassandra.service.ClientState.checkPermissionOnResourceChain(org.apache.cassandra.auth.Permission, org.apache.cassandra.auth.IResource);AuthenticatedUser
org.apache.cassandra.service.MigrationManager.notifyCreateColumnFamily(org.apache.cassandra.config.CFMetaData);CFMetaData
org.apache.cassandra.service.MigrationManager.notifyCreateView(org.apache.cassandra.config.ViewDefinition);ViewDefinition
org.apache.cassandra.service.MigrationManager.notifyCreateUserType(org.apache.cassandra.db.marshal.UserType);UserType
org.apache.cassandra.service.MigrationManager.notifyUpdateColumnFamily(org.apache.cassandra.config.CFMetaData, boolean);CFMetaData
org.apache.cassandra.service.MigrationManager.notifyUpdateView(org.apache.cassandra.config.ViewDefinition, boolean);ViewDefinition
org.apache.cassandra.service.MigrationManager.notifyUpdateUserType(org.apache.cassandra.db.marshal.UserType);UserType
org.apache.cassandra.service.MigrationManager.notifyDropColumnFamily(org.apache.cassandra.config.CFMetaData);CFMetaData
org.apache.cassandra.service.MigrationManager.notifyDropView(org.apache.cassandra.config.ViewDefinition);ViewDefinition
org.apache.cassandra.service.MigrationManager.notifyDropUserType(org.apache.cassandra.db.marshal.UserType);UserType
org.apache.cassandra.service.QueryState.getClientAddress();ClientState
org.apache.cassandra.service.StorageService.setGossipTokens(java.util.Collection<org.apache.cassandra.dht.Token>);VersionedValueFactory
org.apache.cassandra.streaming.ConnectionHandler.sendMessage(org.apache.cassandra.streaming.messages.StreamMessage);OutgoingMessageHandler
org.apache.cassandra.thrift.CassandraServer.toInternalFilter(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SliceRange);ColumnParent
org.apache.cassandra.thrift.CassandraServer.toInternalFilter(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SlicePredicate);ColumnParent
org.apache.cassandra.thrift.CassandraServer.cellFromColumn(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.LegacyLayout.LegacyCellName, org.apache.cassandra.thrift.Column);Column
org.apache.cassandra.tracing.Tracing.doneWithNonLocalSession(org.apache.cassandra.tracing.TraceState);TraceState
org.apache.cassandra.db.RowIndexEntryTest.Pre_C_11206_RowIndexEntry.Serializer.serialize(org.apache.cassandra.db.RowIndexEntryTest.Pre_C_11206_RowIndexEntry, org.apache.cassandra.io.util.DataOutputPlus);Pre_C_11206_RowIndexEntry
org.apache.cassandra.db.RowIndexEntryTest.Pre_C_11206_RowIndexEntry.Serializer.serializedSize(org.apache.cassandra.db.RowIndexEntryTest.Pre_C_11206_RowIndexEntry);Pre_C_11206_RowIndexEntry
org.apache.cassandra.db.compaction.CompactionController.getShadowIterator(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.DecoratedKey, boolean);SSTableReader
org.apache.cassandra.stress.report.StressMetrics.logHistograms(java.lang.String, org.apache.cassandra.stress.report.TimingInterval);TimingInterval
org.apache.cassandra.cql3.UserTypes.DelayedValue.bindInternal(org.apache.cassandra.cql3.QueryOptions);UserType
org.apache.cassandra.gms.Gossiper.applyNewStates(java.net.InetAddress, org.apache.cassandra.gms.EndpointState, org.apache.cassandra.gms.EndpointState);EndpointState
org.apache.cassandra.config.Schema.load(org.apache.cassandra.config.CFMetaData);CFMetaData
org.apache.cassandra.cql3.restrictions.StatementRestrictions.processCustomIndexExpressions(java.util.List<org.apache.cassandra.cql3.restrictions.CustomIndexExpression>, org.apache.cassandra.cql3.VariableSpecifications, org.apache.cassandra.index.SecondaryIndexManager);CFMetaData
org.apache.cassandra.cql3.restrictions.StatementRestrictions.getRowFilter(org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions);IndexRestrictions
org.apache.cassandra.db.Slice.intersects(org.apache.cassandra.db.ClusteringComparator, java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>);ClusteringBound
org.apache.cassandra.db.Slice.toString(org.apache.cassandra.db.ClusteringComparator);ClusteringBound
org.apache.cassandra.db.compaction.CompactionManager.parallelAllSSTableOperation(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.compaction.CompactionManager.OneSSTableOperation, int, org.apache.cassandra.db.compaction.OperationType);ColumnFamilyStore
org.apache.cassandra.db.compaction.CompactionManager.performAnticompaction(org.apache.cassandra.db.ColumnFamilyStore, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, org.apache.cassandra.utils.concurrent.Refs<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.lifecycle.LifecycleTransaction, long);LifecycleTransaction
org.apache.cassandra.db.compaction.LeveledManifest.getSSTablesForSTCS(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>);SizeTieredCompactionStrategyOptions
org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(org.apache.cassandra.db.rows.RangeTombstoneMarker, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.io.util.DataOutputPlus, long, int);SerializationHeader
org.apache.cassandra.io.util.MmappedRegions.updateState(long);State
org.apache.cassandra.io.util.MmappedRegions.updateState(org.apache.cassandra.io.compress.CompressionMetadata);CompressionMetadata
org.apache.cassandra.streaming.StreamManager.register(org.apache.cassandra.streaming.StreamResultFuture);StreamResultFuture
org.apache.cassandra.streaming.StreamManager.registerReceiving(org.apache.cassandra.streaming.StreamResultFuture);StreamResultFuture
org.apache.cassandra.streaming.StreamSession.fileSent(org.apache.cassandra.streaming.messages.FileMessageHeader);FileMessageHeader
org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SliceRange);SliceRange
org.apache.cassandra.thrift.CassandraServer.internal_remove(java.nio.ByteBuffer, org.apache.cassandra.thrift.ColumnPath, long, org.apache.cassandra.thrift.ConsistencyLevel, boolean, long);ColumnPath
org.apache.cassandra.tools.nodetool.stats.TableStatsHolder.initializeKeyspaces(org.apache.cassandra.tools.NodeProbe, boolean, boolean, java.util.List<java.lang.String>);NodeProbe
