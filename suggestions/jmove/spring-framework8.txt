Refactoring Type	Source Method	Target Class
Move Method	org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler::getTargetDestinations(Annotation, Message<?>, String):String[]	org.springframework.messaging.Message
Move Method	org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler::processHandlerMethodException(HandlerMethod, Exception, Message<?>):void	org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite
Move Method	org.springframework.messaging.simp.user.MultiServerUserRegistry::addRemoteRegistryDto(Message<?>, MessageConverter, long):void	org.springframework.messaging.converter.MessageConverter
Move Method	org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests::createInputMessage(String, String, String, Principal):Message<?>	org.springframework.messaging.MessageChannel
Move Method	org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests::createMessage(SimpMessageType, String, Map<String,Object>):Message<?>	org.springframework.messaging.converter.MessageConverter
Move Method	org.springframework.messaging.handler.annotation.reactive.HeaderMethodArgumentResolverTests::resolveArgument(MethodParameter, Message<?>):T	org.springframework.messaging.handler.annotation.reactive.HeaderMethodArgumentResolver
Move Method	org.springframework.messaging.handler.annotation.reactive.DestinationVariableMethodArgumentResolverTests::resolveArgument(MethodParameter, Message<?>):T	org.springframework.messaging.handler.annotation.reactive.DestinationVariableMethodArgumentResolver
Move Method	org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler::getExceptionHandlerMethod(HandlerMethod, Exception):InvocableHandlerMethod	org.springframework.messaging.handler.HandlerMethod
Move Method	org.springframework.messaging.core.GenericMessagingTemplate::doReceive(MessageChannel, long):Message<?>	org.springframework.messaging.MessageChannel
Move Method	org.springframework.messaging.handler.annotation.reactive.HeadersMethodArgumentResolverTests::resolveArgument(MethodParameter):T	org.springframework.messaging.handler.annotation.reactive.HeadersMethodArgumentResolver
Move Method	org.springframework.messaging.simp.stomp.DefaultStompSession::invokeHandler(StompFrameHandler, Message<byte[]>, StompHeaders):void	org.springframework.messaging.simp.stomp.StompFrameHandler
Move Method	org.springframework.messaging.converter.AbstractMessageConverter::getMimeType(MessageHeaders):MimeType	org.springframework.messaging.converter.ContentTypeResolver
Move Method	org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests::getCapturedAccessor(int):SimpMessageHeaderAccessor	org.springframework.messaging.MessageChannel
Move Method	org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler::logMessage(Message<?>):void	org.springframework.messaging.support.MessageHeaderInitializer
Move Method	org.springframework.messaging.simp.broker.OrderedMessageSender::sendNextMessage():void	org.springframework.messaging.MessageChannel
Move Method	org.springframework.messaging.core.GenericMessagingTemplate::doSend(MessageChannel, Message<?>, long):void	org.springframework.messaging.MessageChannel
Move Method	org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration::getPathMatcher():PathMatcher	org.springframework.messaging.simp.config.MessageBrokerRegistry
Move Method	org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandlerTests::verifyOutputContent(List<String>):void	org.springframework.messaging.handler.invocation.reactive.TestEncoderMethodReturnValueHandler
Move Method	org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver::getPayloadType(MethodParameter, Message<?>):Class<?>	org.springframework.messaging.converter.MessageConverter
Move Method	org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolverTests::handle(Message<?>, Message<Integer>, Message<Number>, Message<? extends Number>, ErrorMessage, Message<Foo>):void	org.springframework.messaging.support.ErrorMessage
Move Method	org.springframework.messaging.handler.annotation.reactive.HeaderMethodArgumentResolver::getNativeHeaders(Message<?>):Map<String,List<String>>	org.springframework.messaging.Message
Move Method	org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod::getMethodArgumentValues(Message<?>, Object[]):Mono<Object[]>	org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite
Move Method	org.springframework.messaging.handler.invocation.InvocableHandlerMethod::getMethodArgumentValues(Message<?>, Object[]):Object[]	org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite
Move Method	org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandlerTests::message(String, String[]):Message<?>	org.springframework.messaging.handler.invocation.reactive.TestEncoderMethodReturnValueHandler
Move Method	org.springframework.messaging.handler.invocation.reactive.InvocableHelper::handleReturnValue(Object, HandlerMethod, Message<?>):Mono<Void>	org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite
Move Method	org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler::getUserName(Message<?>, MessageHeaders):String	org.springframework.messaging.Message
Move Method	org.springframework.messaging.simp.SimpMessagingTemplate::sendInternal(Message<?>):void	org.springframework.messaging.MessageChannel
Move Method	org.springframework.messaging.rsocket.DefaultRSocketRequester.DefaultRequestSpec::firstPayload(DataBuffer):Payload	org.springframework.messaging.rsocket.MetadataEncoder
Move Method	org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod::isAsyncVoidReturnType(MethodParameter, ReactiveAdapter):boolean	org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite
Move Method	org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler::registerExceptionHandlerAdvice(MessagingAdviceBean, AbstractExceptionHandlerMethodResolver):void	org.springframework.messaging.handler.invocation.reactive.InvocableHelper
Move Method	org.springframework.messaging.simp.stomp.DefaultStompSession::createMessage(StompHeaderAccessor, Object):Message<byte[]>	org.springframework.messaging.converter.MessageConverter
Move Method	org.springframework.messaging.handler.annotation.support.HeaderMethodArgumentResolver::getNativeHeaders(Message<?>):Map<String,List<String>>	org.springframework.messaging.Message
Move Method	org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver::getMimeType(Message<?>):MimeType	org.springframework.messaging.Message
Move Method	org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests::createMessage(String, String, String, String, Principal):Message<?>	org.springframework.messaging.MessageChannel
Move Method	org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler::sendMessageToSubscribers(String, Message<?>):void	org.springframework.messaging.simp.broker.SubscriptionRegistry
Move Method	org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry::getSelectorExpression(MessageHeaders):Expression	org.springframework.messaging.MessageHeaders
